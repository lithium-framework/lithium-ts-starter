{"mappings":";;;AEuCO,MAAMK,kDAAqDsB;IAIhE;;;;;;;;;;GAUF,GACE,OAAOf,KAAyCL,OAAgB,EAAEqB,SAA0B,EAAmB;QAC7G,OAAO,IAAIvB,0CAAiBE,SAASqB;IACvC;IAEA;;;;GAIF,GACEC,YAAYtB,OAAgB,EAAEqB,SAA0B,CAAE;QACxD,KAAK;QAAG,IAAA,CAvBFE,UAAU,GAAmB;QAyBnC,IAAIF,WAAW,IAAI,CAACE,UAAU,GAAGF;QAEjC,+DAAA;QACA,IAAIrB,SACFwB,OAAOC,IAAI,CAACzB,SAAS0B,OAAO,CAAElB,CAAAA;YAC5B,IAAI,CAACK,GAAG,CAACL,KAAKQ,CAAAA,GAAAA,kBAAAA,EAAYhB,OAAO,CAACQ,IAAI;QACxC;IAEJ;IAEA;;;;;;;;;;;;GAYF,GACEF,IAAaE,GAAwB,EAAuB;QAC1D,IAAI,CAAC,IAAI,CAACe,UAAU,EAAE,OAAO,KAAK,CAACjB,IAAIE;aAElC;YACH,IAAI,CAACmB,OAAOC,OAAO,GAAG,KAAK,CAACtB,IAAIE;YAChC,OAAO;gBAACmB;gBAAO,CAACb;oBACd,IAAIG,gBAAgBU,MAAME,KAAK;oBAC/B,IAAIC,SAAS,IAAI,CAACP,UAAU,CAACf,KAAeS,eAAeH;oBAE3D,IAAIgB,kBAAkBX,SACpBW,OACGC,IAAI,CAAC,IAAMH,OAAOd,WAClBkB,KAAK,CAAEC,CAAAA,QAAUC,QAAQD,KAAK,CAACA;yBAC7B,IAAIH,UAAU,MACnBF,OAAOd;gBAEX;aAAE;QACJ;IACF;AACF;;;ADzFO,SAASrB,0CAAkDO,UAA2B,CAAC,CAAC,EAAEG,cAA+B;IAE9H,4CAAA;IACA,OAAO,IAAIC,MAAMN,CAAAA,GAAAA,yCAAAA,EAASO,IAAI,CAASL,SAAmBG,iBAAiB;QAEzE;;;;;;;;;;;;IAYJ,GACIG,KAAIC,MAAM,EAAEC,GAAiB,EAAEC,QAAQ;YACrC,oCAAA;YACA,IAAIF,MAAM,CAACC,IAAI,EAAE;gBACf,IAAI,OAAOD,MAAM,CAACC,IAAI,IAAI,YAAY,OAAO,AAACD,MAAM,CAACC,IAAI,CAASE,IAAI,CAACH;qBAElE,OAAOA,MAAM,CAACC,IAAI;YACzB,OAIK,IAAID,OAAOI,GAAG,CAACH,MAAM,OAAOD,OAAOD,GAAG,CAACE;iBAEvC,OAAOI;QACd;QAEA;;;;;;;;;;;;;IAaJ,GACIC,KAAIN,MAAM,EAAEC,GAAiB,EAAEM,QAAQ,EAAEL,QAAQ;YAC/C,IAAIF,OAAOI,GAAG,CAACH,MAAM;gBACnB,2CAAA;gBACAD,OAAOD,GAAG,CAACE,IAAI,CAAC,EAAE,CAACM;gBACnB,OAAO;YACT,OAEK,OAAOF;QACd;IACF;AAEF","sources":["src/index.ts","src/create-storage.ts","src/models/storage.ts"],"sourcesContent":["export { createStorage } from './create-storage.js';\nexport type { Storage , StorageKeys , StorageValues , StateValidator } from './models/storage.js'","import { _storage, Storage, StateValidator } from './models/storage.js';\n\n/**\n * La fonction `createStorage` crée un objet proxy pour gérer le stockage avec des méthodes d'accès et de mise à jour des données.\n * @template RECORD - Le type de l'enregistrement de stockage.\n * @param {Partial<RECORD>} [records={}] - Un objet partiel de type `RECORD`, contenant des données initiales pour le stockage. \n * @param {StateValidator} [stateValidator] - Une fonction de validation optionnelle appelée lors de la modification d'un état.\n * @returns {Storage<RECORD>} Un objet Proxy qui entoure l'objet de stockage créé en appelant `_storage.init` avec les enregistrements fournis.\n * @example\n * ```typescript\n * const initialData = { counter: 0, name: \"Alice\" };\n * const validator: StateValidator<number> = (key, previousValue, newValue) => newValue >= 0;\n * const storage = createStorage(initialData, validator);\n * \n * let [ counter , setCounter ] = storage.get('counter');\n * setCounter( 10 ); // met à jour la valeur si la validation réussit\n * console.log(+counter); // affiche 10\n * ```\n */\nexport function createStorage<RECORD extends Record<string, any>>(records: Partial<RECORD> = {}, stateValidator?: StateValidator): Storage<RECORD> {\n\n  // Création d'un proxy contenant le stockage\n  return new Proxy(_storage.init<RECORD>(records as RECORD, stateValidator), {\n\n    /**\n     * Intercepte les opérations d'accès aux propriétés du stockage.\n     * @param {Storage<RECORD>} target - L'objet cible auquel les opérations sont appliquées.\n     * @param {string} key - La clé de l'état ou de la méthode accédée.\n     * @param {any} receiver - L'objet Proxy qui intercepte l'opération.\n     * @returns {any} La méthode ou la valeur de l'état correspondant à la clé.\n     * @example\n     * ```typescript\n     * const storage = createStorage({ count: 0 });\n     * console.log(storage.count[0].value); // affiche 0\n     * storage.count ; // met à jour la valeur de count à 5\n     * ```\n    */\n    get(target, key: string & any, receiver) {\n      // Retourne les méthodes du stockage\n      if (target[key]) {\n        if (typeof target[key] == \"function\") return (target[key] as any).bind(target);\n        // Retourne les variables du stockage\n        else return target[key];\n      }\n      // Si la clé n'est pas dans le stockage\n      // Vérification de la présence de la clé dans le map du stockage\n      // Si présence de celle-ci, elle est retournée\n      else if (target.has(key)) return target.get(key);\n      // Sinon la clé n'existe pas et retourne undefined\n      else return undefined;\n    },\n\n    /**\n     * Intercepte les opérations de mise à jour des propriétés du stockage.\n     * @param {Storage<RECORD>} target - L'objet cible auquel les opérations sont appliquées.\n     * @param {string} key - La clé de l'état à mettre à jour.\n     * @param {any} newValue - La nouvelle valeur à assigner à l'état.\n     * @param {any} receiver - L'objet Proxy qui intercepte l'opération.\n     * @returns {boolean} Un indicateur de succès de la mise à jour.\n     * @example\n     * ```typescript\n     * const storage = createStorage({ count: 0 });\n     * storage.count ; // met à jour la valeur de count à 5\n     * console.log(storage.count[0].value); // affiche 5\n     * ```\n    */\n    set(target, key: string & any, newValue, receiver) {\n      if (target.has(key)) {\n        // Mise à jour du state contenant la valeur\n        target.get(key)[1](newValue);\n        return true;\n      }\n      // Sinon return undefined\n      else return undefined;\n    }\n  }) as any;\n\n}\n","import { State, createState } from '@lithium-framework/state';\n\n/**\n * Représente la fonction appelée lors du changement d'un état.\n * Cette fonction permet de valider la nouvelle valeur avant de l'appliquer à l'état.\n * La nouvelle valeur est stockée dans le state correspondant en fonction du succès ou de l'échec de l'opération.\n *\n * @template T - Le type de la valeur de l'état.\n * @param {string} key - La clé de l'état en cours de modification.\n * @param {T} previousValue - La valeur précédente de l'état avant la modification.\n * @param {T} newValue - La nouvelle valeur proposée pour l'état.\n * @returns {Promise<any> | boolean} - Une promesse ou une valeur booléenne indiquant le succès ou l'échec de la modification.\n * @example\n * ```typescript\n * const validator: StateValidator<number> = (key, previousValue, newValue) => {\n *   if (newValue >= 0) return true;\n *   return false;\n * };\n * ```\n */\nexport type StateValidator<T = any> = (key: string, previousValue: T, newValue: T) => Promise<any> | boolean;\n\n/** \n * Type représentant les clés des valeurs d'un enregistrement.\n * @template RECORD - Le type de l'enregistrement.\n */\nexport type StorageKeys<RECORD> = keyof RECORD;\n\n/** \n * Type représentant les mutateurs des valeurs d'un enregistrement.\n * @template RECORD - Le type de l'enregistrement.\n */\nexport type StorageValues<RECORD> = State<RECORD[StorageKeys<RECORD>]>[\"mutator\"];\n\n/** \n * La classe `_storage` étend `Map` pour stocker les valeurs d'état et fournit des méthodes\n * d'initialisation et d'accès aux mutateurs par clé.\n * @template RECORD - Le type de l'enregistrement stocké.\n */\nexport class _storage<RECORD extends Record<string, any>> extends Map<StorageKeys<RECORD>, StorageValues<RECORD>> {\n\n  private _validator: StateValidator = null;\n\n  /**\n   * Initialise une nouvelle instance de la classe `_storage` avec des enregistrements initiaux facultatifs et un validateur optionnel.\n   * @param {RECORD} [records] - Un objet contenant des paires clé-valeur représentant des enregistrements de données.\n   * @param {StateValidator} [validator] - Une fonction de validation optionnelle appelée lors de la modification d'un état.\n   * @returns {Storage<RECORD>} Une nouvelle instance de la classe `_storage` initialisée avec les enregistrements et le validateur fournis.\n   * @example\n   * ```typescript\n   * const records = { count: 0, name: \"John\" };\n   * const storage = _storage.init(records);\n   * ```\n   */\n  static init<RECORD extends Record<string, any>>(records?: RECORD, validator?: StateValidator): Storage<RECORD> {\n    return new _storage<RECORD>(records, validator) as Storage<RECORD>;\n  }\n\n  /**\n   * Constructeur qui initialise la classe `_storage` avec des enregistrements optionnels et un validateur.\n   * @param {RECORD} [records] - Un objet contenant des paires clé-valeur représentant des enregistrements de données.\n   * @param {StateValidator} [validator] - Une fonction de validation optionnelle appelée lors de la modification d'un état.\n   */\n  constructor(records?: RECORD, validator?: StateValidator) {\n    super();\n\n    if (validator) this._validator = validator;\n\n    // Si des enregistrements sont fournis, les ajouter au _storage\n    if (records) {\n      Object.keys(records).forEach((key) => {\n        this.set(key, createState(records[key]));\n      });\n    }\n  }\n\n  /**\n   * Récupère la valeur du stockage en fonction d'une clé spécifiée.\n   * Si un validateur est défini, il valide la nouvelle valeur avant de l'appliquer.\n   * @template T - Le type de la valeur de l'état.\n   * @param {StorageKeys<RECORD>} key - La clé utilisée pour accéder à un enregistrement spécifique en stockage.\n   * @returns {State<T>[\"mutator\"]} La fonction `mutator` associée à la clé spécifiée de l'objet `State`.\n   * @example\n   * ```typescript\n   * const storage = _storage.init({ count: 0 });\n   * const [count, setCount] = storage.get(\"count\");\n   * setCount(10); // met à jour la valeur si la validation réussit\n   * ```\n   */\n  get<T = any>(key: StorageKeys<RECORD>): State<T>[\"mutator\"] {\n    if (!this._validator) return super.get(key)!;\n\n    else {\n      let [state, setter] = super.get(key)!;\n      return [state, (newValue: T) => {\n        let previousValue = state.value;\n        let result = this._validator(key as string, previousValue, newValue);\n\n        if (result instanceof Promise) {\n          result\n            .then(() => setter(newValue as any))\n            .catch((error) => console.error(error));\n        } else if (result == true) {\n          setter(newValue as any);\n        }\n      }];\n    }\n  }\n}\n\n/** \n * Type `Storage` qui étend partiellement `_storage`.\n * @template RECORD - Le type de l'enregistrement.\n */\nexport type Storage<RECORD extends Record<string, any>> = _storage<RECORD> & { [key in StorageKeys<RECORD>]: StorageValues<RECORD> };\n"],"names":["createStorage","Storage","StorageKeys","StorageValues","StateValidator","_storage","Record","records","Partial","RECORD","stateValidator","Proxy","init","get","target","key","receiver","bind","has","undefined","set","newValue","State","createState","previousValue","T","Promise","Map","validator","constructor","_validator","Object","keys","forEach","state","setter","value","result","then","catch","error","console"],"version":3,"file":"module.js.map"}