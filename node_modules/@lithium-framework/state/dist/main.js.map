{"mappings":";;;;;;;;;;ACKO,MAAMA;IAiBXI,YAAaC,QAAQ,IAAI,CAAE;QAf3B;;IAEF,GAFE,IAAA,CAGQC,QAAQ,GAAS,EAAE;QAE3B;;IAEF,GAFE,IAAA,CAGQC,MAAM,GAAK;QAEnB;;IAEF,GAFE,IAAA,CAGQC,SAAS,GAAYL,CAAAA,GAAAA,sCAAAA,EAAWM,WAAW,CAAE,IAAK;QAGxD,IAAI,CAACF,MAAM,GAAGF;IAChB;IAGA;;EAEF,GACE,IAAIA,QAAQ;QACVF,CAAAA,GAAAA,sCAAAA,EAAWO,KAAK,CAAC,IAAI,EAAE;QACvB,OAAO,IAAI,CAACH,MAAM;IACpB;IAEA;;;;EAIF,GACE,IAAIF,MAAMA,KAAQ,EAAE;QAClB,IAAI,CAACE,MAAM,GAAGF;QAEd,IAAI,CAACC,QAAQ,GAAG;YAAE,IAAI,CAACC,MAAM;eAAM,IAAI,CAACD,QAAQ,CAACM,OAAO;SAAI,CAACC,MAAM,CAAC,CAAEC,SAAUT;YAC9E,IAAGS,QAAQC,MAAM,GAAG,IAClBD,QAAQE,IAAI,CAAEX;YAEhB,OAAOS;QACT,GAAI,EAAE,EAAEF,OAAO;QAEfT,CAAAA,GAAAA,sCAAAA,EAAWc,MAAM,CAAC,IAAI,EAAE;IAC1B;IAEA;;;;EAIF,GACE,OAAOC,KAAeb,QAAY,IAAI,EAAE;QACtC,OAAO,IAAIL,0CAAUK;IACvB;IAEA;;;EAGF,GACE,IAAIc,UAAJ;QACE,OAAO;YAAE,IAAI;YAAU,CAAEd;gBACvB,IAAI,CAACA,KAAK,GAAGA;YACf;SAAG;IACL;IAEA;;;EAGF,GACEgB,UAAWC,QAAgC,EAAE;QAC3C,IAAI,CAACd,SAAS,CAACa,SAAS,CAAE;YAAEE,cAAeA,CAAEC,OAAQC;gBACnDH,SAAUE,KAAK,CAACC,IAAK;YACvB;QAAE;IACJ;IAEA;;;EAGF,GACE,CAACC,OAAOC,WAAW,CAAA,GAAG;QACpB,OAAO,OAAO,IAAI,CAACtB,KAAK,IAAI,WAAW,IAAI,CAACA,KAAK,GAAG,IAAIuB,MAAO,IAAI,CAACvB,KAAK,EAAG;YAC1EwB,KAAKC,MAAM,EAAGL,GAAG;gBACf,OAAOK,MAAM,CAACL,IAAI,GAAGK,MAAM,CAACL,IAAI,GAAGM;YACrC;QACF;IACF;AAEF;;;;AC1EO,SAAS9B,wCAAwBI,QAAU,IAAI;IAEpD,OAAOL,CAAAA,GAAAA,yCAAAA,EAAMkB,IAAI,CAAEb,OAAQc,OAAO;AAEpC;;","sources":["src/index.ts","src/models/state.ts","src/createState.ts"],"sourcesContent":["export { State } from './models/state.js';\nexport { createState } from './createState.js';","import { Notifier, Observable } from \"@microsoft/fast-element\";\n\n/** \n * La classe `State` gère et suit les valeurs d'état avec des capacités d'historique et d'abonnement.\n */\nexport class State<T = any>{\n\n  /** \n   * Propriété privée pour stocker l'historique des valeurs d'état, limitée aux 10 dernières entrées.\n  */\n  private _history : T[] = [];\n\n  /** \n   * Propriété privée pour stocker la valeur actuelle de l'état, initialisée à `null`.\n  */\n  private _value:T = null;\n\n  /** \n   * Propriété privée pour notifier les observateurs des changements d'état, initialisée avec `Observable.getNotifier`.\n  */\n  private _notifier:Notifier = Observable.getNotifier( this );\n\n  constructor( value = null ){\n    this._value = value;\n  }\n\n\n  /** \n   * Getter pour la valeur actuelle de l'état. Utilise `Observable.track` pour suivre les changements.\n  */\n  get value() {\n    Observable.track(this, 'value');\n    return this._value;\n  };\n\n  /**\n   * Setter pour mettre à jour la valeur de l'état. Ajoute la valeur actuelle à l'historique et notifie\n   * les observateurs du changement.\n   * @param {T} value - Nouvelle valeur de l'état.\n  */\n  set value(value: T) {\n    this._value = value;\n\n    this._history = [ this._value , ...this._history.reverse() ].reduce(( results , value ) => {\n      if(results.length > 10){\n        results.push( value );\n      };\n      return results;\n    } , []).reverse();\n\n    Observable.notify(this, 'value');\n  }\n\n  /**\n   * Méthode statique pour initialiser un nouvel objet `State` avec une valeur initiale facultative.\n   * @param {T} [value=null] - Valeur initiale de l'état.\n   * @returns Une nouvelle instance de `State` avec la valeur spécifiée.\n  */\n  static init<T = any>( value : T = null ){\n    return new State<T>( value );\n  }\n\n  /**\n   * Renvoie un tableau avec l'état actuel et une fonction pour mettre à jour l'état.\n   * @returns Un tableau contenant l'état actuel et une fonction de mise à jour.\n  */\n  get mutator():[ State<T> & T , ( newValue:T ) => void ]{\n    return [ this as any , ( value:T ) => {\n      this.value = value;\n    } ]\n  }\n\n  /** \n   * Abonne une fonction de rappel qui sera appelée à chaque changement de valeur de l'état.\n   * @param {function} callback - Fonction à appeler lors d'un changement de valeur.\n  */\n  subscribe( callback:(newValue: any) => void ){\n    this._notifier.subscribe( { handleChange : ( state , key ) => {\n      callback( state[key] );\n    } } );\n  };\n\n  /**\n   * Convertit l'état en une valeur primitive pour les objets, ou en Proxy pour les objets complexes.\n   * @returns La valeur primitive ou un Proxy pour les objets complexes.\n  */\n  [Symbol.toPrimitive](){\n    return typeof this.value != \"object\" ? this.value : new Proxy( this.value , {\n      get( target , key ){\n        return target[key] ? target[key] : undefined;\n      }\n    } )\n  }\n\n}","import { State } from \"./models/state.js\";\n\n/**\n * La fonction createState crée un état avec une valeur initiale et renvoie son mutateur.\n * @param {T} [value=null] - Le paramètre `value` dans la fonction `createState` est la valeur initiale\n * que vous souhaitez définir pour l'état. Il est facultatif et la valeur par défaut est « null » si\n * aucune valeur n'est fournie lors de l'appel de la fonction.\n * @returns La fonction `createState` renvoie la fonction `mutator` à partir de l'objet `State`\n * initialisé avec la `valeur` fournie.\n * ## Exemple \n * ```typescript\n * let [ counter , setCounter ] = createState<number>(0);\n * \n * counter.subscribe(( newValue ) => {\n *  \n *  console.log({newValue})\n * \n * })\n * ```\n */\nexport function createState< T = any >( value:T = null ):State< T >[\"mutator\"]{\n\n  return State.init( value ).mutator;\n\n}"],"names":["State","createState","Notifier","Observable","constructor","value","_history","_value","_notifier","getNotifier","track","T","reverse","reduce","results","length","push","notify","init","mutator","newValue","subscribe","callback","handleChange","state","key","Symbol","toPrimitive","Proxy","get","target","undefined"],"version":3,"file":"main.js.map"}